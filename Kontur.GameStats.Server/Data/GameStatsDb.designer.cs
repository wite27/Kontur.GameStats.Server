#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Kontur.GameStats.Server.Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="game_stats_db")]
	public partial class GameStatsDbDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void InsertGameModes(GameModes instance);
    partial void UpdateGameModes(GameModes instance);
    partial void DeleteGameModes(GameModes instance);
    partial void InsertGameModesOnServers(GameModesOnServers instance);
    partial void UpdateGameModesOnServers(GameModesOnServers instance);
    partial void DeleteGameModesOnServers(GameModesOnServers instance);
    partial void InsertMaps(Maps instance);
    partial void UpdateMaps(Maps instance);
    partial void DeleteMaps(Maps instance);
    partial void InsertPlayers(Players instance);
    partial void UpdatePlayers(Players instance);
    partial void DeletePlayers(Players instance);
    partial void InsertServers(Servers instance);
    partial void UpdateServers(Servers instance);
    partial void DeleteServers(Servers instance);
    partial void InsertServersByDay(ServersByDay instance);
    partial void UpdateServersByDay(ServersByDay instance);
    partial void DeleteServersByDay(ServersByDay instance);
    partial void InsertMatches(Matches instance);
    partial void UpdateMatches(Matches instance);
    partial void DeleteMatches(Matches instance);
    partial void InsertPlayersInMatches(PlayersInMatches instance);
    partial void UpdatePlayersInMatches(PlayersInMatches instance);
    partial void DeletePlayersInMatches(PlayersInMatches instance);
    #endregion
		
		public GameStatsDbDataContext() : 
				base(global::Kontur.GameStats.Server.Properties.Settings.Default.game_stats_db_connection_string, mappingSource)
		{
			OnCreated();
		}
		
		public GameStatsDbDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public GameStatsDbDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public GameStatsDbDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public GameStatsDbDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<GameModes> GameModes
		{
			get
			{
				return this.GetTable<GameModes>();
			}
		}
		
		public System.Data.Linq.Table<GameModesOnServers> GameModesOnServers
		{
			get
			{
				return this.GetTable<GameModesOnServers>();
			}
		}
		
		public System.Data.Linq.Table<Maps> Maps
		{
			get
			{
				return this.GetTable<Maps>();
			}
		}
		
		public System.Data.Linq.Table<Players> Players
		{
			get
			{
				return this.GetTable<Players>();
			}
		}
		
		public System.Data.Linq.Table<Servers> Servers
		{
			get
			{
				return this.GetTable<Servers>();
			}
		}
		
		public System.Data.Linq.Table<ServersByDay> ServersByDay
		{
			get
			{
				return this.GetTable<ServersByDay>();
			}
		}
		
		public System.Data.Linq.Table<Matches> Matches
		{
			get
			{
				return this.GetTable<Matches>();
			}
		}
		
		public System.Data.Linq.Table<PlayersInMatches> PlayersInMatches
		{
			get
			{
				return this.GetTable<PlayersInMatches>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GameModes")]
	public partial class GameModes : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private EntitySet<GameModesOnServers> _GameModesOnServers;
		
		private EntitySet<Matches> _Matches;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public GameModes()
		{
			this._GameModesOnServers = new EntitySet<GameModesOnServers>(new Action<GameModesOnServers>(this.attach_GameModesOnServers), new Action<GameModesOnServers>(this.detach_GameModesOnServers));
			this._Matches = new EntitySet<Matches>(new Action<Matches>(this.attach_Matches), new Action<Matches>(this.detach_Matches));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(5) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GameModes_GameModesOnServers", Storage="_GameModesOnServers", ThisKey="id", OtherKey="gm_id")]
		public EntitySet<GameModesOnServers> GameModesOnServers
		{
			get
			{
				return this._GameModesOnServers;
			}
			set
			{
				this._GameModesOnServers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GameModes_Matches", Storage="_Matches", ThisKey="id", OtherKey="gm_id")]
		public EntitySet<Matches> Matches
		{
			get
			{
				return this._Matches;
			}
			set
			{
				this._Matches.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GameModesOnServers(GameModesOnServers entity)
		{
			this.SendPropertyChanging();
			entity.GameModes = this;
		}
		
		private void detach_GameModesOnServers(GameModesOnServers entity)
		{
			this.SendPropertyChanging();
			entity.GameModes = null;
		}
		
		private void attach_Matches(Matches entity)
		{
			this.SendPropertyChanging();
			entity.GameModes = this;
		}
		
		private void detach_Matches(Matches entity)
		{
			this.SendPropertyChanging();
			entity.GameModes = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GameModesOnServers")]
	public partial class GameModesOnServers : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _server_id;
		
		private int _gm_id;
		
		private EntityRef<GameModes> _GameModes;
		
		private EntityRef<Servers> _Servers;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onserver_idChanging(int value);
    partial void Onserver_idChanged();
    partial void Ongm_idChanging(int value);
    partial void Ongm_idChanged();
    #endregion
		
		public GameModesOnServers()
		{
			this._GameModes = default(EntityRef<GameModes>);
			this._Servers = default(EntityRef<Servers>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_server_id", DbType="Int NOT NULL")]
		public int server_id
		{
			get
			{
				return this._server_id;
			}
			set
			{
				if ((this._server_id != value))
				{
					if (this._Servers.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onserver_idChanging(value);
					this.SendPropertyChanging();
					this._server_id = value;
					this.SendPropertyChanged("server_id");
					this.Onserver_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_gm_id", DbType="Int NOT NULL")]
		public int gm_id
		{
			get
			{
				return this._gm_id;
			}
			set
			{
				if ((this._gm_id != value))
				{
					if (this._GameModes.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Ongm_idChanging(value);
					this.SendPropertyChanging();
					this._gm_id = value;
					this.SendPropertyChanged("gm_id");
					this.Ongm_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GameModes_GameModesOnServers", Storage="_GameModes", ThisKey="gm_id", OtherKey="id", IsForeignKey=true)]
		public GameModes GameModes
		{
			get
			{
				return this._GameModes.Entity;
			}
			set
			{
				GameModes previousValue = this._GameModes.Entity;
				if (((previousValue != value) 
							|| (this._GameModes.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GameModes.Entity = null;
						previousValue.GameModesOnServers.Remove(this);
					}
					this._GameModes.Entity = value;
					if ((value != null))
					{
						value.GameModesOnServers.Add(this);
						this._gm_id = value.id;
					}
					else
					{
						this._gm_id = default(int);
					}
					this.SendPropertyChanged("GameModes");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Servers_GameModesOnServers", Storage="_Servers", ThisKey="server_id", OtherKey="id", IsForeignKey=true)]
		public Servers Servers
		{
			get
			{
				return this._Servers.Entity;
			}
			set
			{
				Servers previousValue = this._Servers.Entity;
				if (((previousValue != value) 
							|| (this._Servers.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Servers.Entity = null;
						previousValue.GameModesOnServers.Remove(this);
					}
					this._Servers.Entity = value;
					if ((value != null))
					{
						value.GameModesOnServers.Add(this);
						this._server_id = value.id;
					}
					else
					{
						this._server_id = default(int);
					}
					this.SendPropertyChanged("Servers");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Maps")]
	public partial class Maps : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private EntitySet<Matches> _Matches;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public Maps()
		{
			this._Matches = new EntitySet<Matches>(new Action<Matches>(this.attach_Matches), new Action<Matches>(this.detach_Matches));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(60) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Maps_Matches", Storage="_Matches", ThisKey="id", OtherKey="map_id")]
		public EntitySet<Matches> Matches
		{
			get
			{
				return this._Matches;
			}
			set
			{
				this._Matches.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Matches(Matches entity)
		{
			this.SendPropertyChanging();
			entity.Maps = this;
		}
		
		private void detach_Matches(Matches entity)
		{
			this.SendPropertyChanging();
			entity.Maps = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Players")]
	public partial class Players : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private int _total_kills;
		
		private int _total_deaths;
		
		private int _matches_played;
		
		private EntitySet<Matches> _Matches;
		
		private EntitySet<PlayersInMatches> _PlayersInMatches;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void Ontotal_killsChanging(int value);
    partial void Ontotal_killsChanged();
    partial void Ontotal_deathsChanging(int value);
    partial void Ontotal_deathsChanged();
    partial void Onmatches_playedChanging(int value);
    partial void Onmatches_playedChanged();
    #endregion
		
		public Players()
		{
			this._Matches = new EntitySet<Matches>(new Action<Matches>(this.attach_Matches), new Action<Matches>(this.detach_Matches));
			this._PlayersInMatches = new EntitySet<PlayersInMatches>(new Action<PlayersInMatches>(this.attach_PlayersInMatches), new Action<PlayersInMatches>(this.detach_PlayersInMatches));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(60) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_total_kills", DbType="Int NOT NULL")]
		public int total_kills
		{
			get
			{
				return this._total_kills;
			}
			set
			{
				if ((this._total_kills != value))
				{
					this.Ontotal_killsChanging(value);
					this.SendPropertyChanging();
					this._total_kills = value;
					this.SendPropertyChanged("total_kills");
					this.Ontotal_killsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_total_deaths", DbType="Int NOT NULL")]
		public int total_deaths
		{
			get
			{
				return this._total_deaths;
			}
			set
			{
				if ((this._total_deaths != value))
				{
					this.Ontotal_deathsChanging(value);
					this.SendPropertyChanging();
					this._total_deaths = value;
					this.SendPropertyChanged("total_deaths");
					this.Ontotal_deathsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_matches_played", DbType="Int NOT NULL")]
		public int matches_played
		{
			get
			{
				return this._matches_played;
			}
			set
			{
				if ((this._matches_played != value))
				{
					this.Onmatches_playedChanging(value);
					this.SendPropertyChanging();
					this._matches_played = value;
					this.SendPropertyChanged("matches_played");
					this.Onmatches_playedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Players_Matches", Storage="_Matches", ThisKey="id", OtherKey="winner_id")]
		public EntitySet<Matches> Matches
		{
			get
			{
				return this._Matches;
			}
			set
			{
				this._Matches.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Players_PlayersInMatches", Storage="_PlayersInMatches", ThisKey="id", OtherKey="player_id")]
		public EntitySet<PlayersInMatches> PlayersInMatches
		{
			get
			{
				return this._PlayersInMatches;
			}
			set
			{
				this._PlayersInMatches.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Matches(Matches entity)
		{
			this.SendPropertyChanging();
			entity.Players = this;
		}
		
		private void detach_Matches(Matches entity)
		{
			this.SendPropertyChanging();
			entity.Players = null;
		}
		
		private void attach_PlayersInMatches(PlayersInMatches entity)
		{
			this.SendPropertyChanging();
			entity.Players = this;
		}
		
		private void detach_PlayersInMatches(PlayersInMatches entity)
		{
			this.SendPropertyChanging();
			entity.Players = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Servers")]
	public partial class Servers : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _endpoint;
		
		private string _name;
		
		private EntitySet<GameModesOnServers> _GameModesOnServers;
		
		private EntitySet<ServersByDay> _ServersByDay;
		
		private EntitySet<Matches> _Matches;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnendpointChanging(string value);
    partial void OnendpointChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public Servers()
		{
			this._GameModesOnServers = new EntitySet<GameModesOnServers>(new Action<GameModesOnServers>(this.attach_GameModesOnServers), new Action<GameModesOnServers>(this.detach_GameModesOnServers));
			this._ServersByDay = new EntitySet<ServersByDay>(new Action<ServersByDay>(this.attach_ServersByDay), new Action<ServersByDay>(this.detach_ServersByDay));
			this._Matches = new EntitySet<Matches>(new Action<Matches>(this.attach_Matches), new Action<Matches>(this.detach_Matches));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_endpoint", DbType="NVarChar(60) NOT NULL", CanBeNull=false)]
		public string endpoint
		{
			get
			{
				return this._endpoint;
			}
			set
			{
				if ((this._endpoint != value))
				{
					this.OnendpointChanging(value);
					this.SendPropertyChanging();
					this._endpoint = value;
					this.SendPropertyChanged("endpoint");
					this.OnendpointChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(60) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Servers_GameModesOnServers", Storage="_GameModesOnServers", ThisKey="id", OtherKey="server_id")]
		public EntitySet<GameModesOnServers> GameModesOnServers
		{
			get
			{
				return this._GameModesOnServers;
			}
			set
			{
				this._GameModesOnServers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Servers_ServersByDay", Storage="_ServersByDay", ThisKey="id", OtherKey="server_id")]
		public EntitySet<ServersByDay> ServersByDay
		{
			get
			{
				return this._ServersByDay;
			}
			set
			{
				this._ServersByDay.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Servers_Matches", Storage="_Matches", ThisKey="id", OtherKey="server_id")]
		public EntitySet<Matches> Matches
		{
			get
			{
				return this._Matches;
			}
			set
			{
				this._Matches.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GameModesOnServers(GameModesOnServers entity)
		{
			this.SendPropertyChanging();
			entity.Servers = this;
		}
		
		private void detach_GameModesOnServers(GameModesOnServers entity)
		{
			this.SendPropertyChanging();
			entity.Servers = null;
		}
		
		private void attach_ServersByDay(ServersByDay entity)
		{
			this.SendPropertyChanging();
			entity.Servers = this;
		}
		
		private void detach_ServersByDay(ServersByDay entity)
		{
			this.SendPropertyChanging();
			entity.Servers = null;
		}
		
		private void attach_Matches(Matches entity)
		{
			this.SendPropertyChanging();
			entity.Servers = this;
		}
		
		private void detach_Matches(Matches entity)
		{
			this.SendPropertyChanging();
			entity.Servers = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ServersByDay")]
	public partial class ServersByDay : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _server_id;
		
		private System.DateTime _timestamp_day;
		
		private int _matches_count;
		
		private EntityRef<Servers> _Servers;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onserver_idChanging(int value);
    partial void Onserver_idChanged();
    partial void Ontimestamp_dayChanging(System.DateTime value);
    partial void Ontimestamp_dayChanged();
    partial void Onmatches_countChanging(int value);
    partial void Onmatches_countChanged();
    #endregion
		
		public ServersByDay()
		{
			this._Servers = default(EntityRef<Servers>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_server_id", DbType="Int NOT NULL")]
		public int server_id
		{
			get
			{
				return this._server_id;
			}
			set
			{
				if ((this._server_id != value))
				{
					if (this._Servers.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onserver_idChanging(value);
					this.SendPropertyChanging();
					this._server_id = value;
					this.SendPropertyChanged("server_id");
					this.Onserver_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_timestamp_day", DbType="Date NOT NULL")]
		public System.DateTime timestamp_day
		{
			get
			{
				return this._timestamp_day;
			}
			set
			{
				if ((this._timestamp_day != value))
				{
					this.Ontimestamp_dayChanging(value);
					this.SendPropertyChanging();
					this._timestamp_day = value;
					this.SendPropertyChanged("timestamp_day");
					this.Ontimestamp_dayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_matches_count", DbType="Int NOT NULL")]
		public int matches_count
		{
			get
			{
				return this._matches_count;
			}
			set
			{
				if ((this._matches_count != value))
				{
					this.Onmatches_countChanging(value);
					this.SendPropertyChanging();
					this._matches_count = value;
					this.SendPropertyChanged("matches_count");
					this.Onmatches_countChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Servers_ServersByDay", Storage="_Servers", ThisKey="server_id", OtherKey="id", IsForeignKey=true)]
		public Servers Servers
		{
			get
			{
				return this._Servers.Entity;
			}
			set
			{
				Servers previousValue = this._Servers.Entity;
				if (((previousValue != value) 
							|| (this._Servers.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Servers.Entity = null;
						previousValue.ServersByDay.Remove(this);
					}
					this._Servers.Entity = value;
					if ((value != null))
					{
						value.ServersByDay.Add(this);
						this._server_id = value.id;
					}
					else
					{
						this._server_id = default(int);
					}
					this.SendPropertyChanged("Servers");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Matches")]
	public partial class Matches : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _server_id;
		
		private System.DateTime _timestamp;
		
		private System.DateTime _timestamp_day;
		
		private int _map_id;
		
		private int _gm_id;
		
		private int _frag_limit;
		
		private int _time_limit;
		
		private double _time_elapsed;
		
		private int _players_count;
		
		private int _winner_id;
		
		private EntitySet<PlayersInMatches> _PlayersInMatches;
		
		private EntityRef<GameModes> _GameModes;
		
		private EntityRef<Maps> _Maps;
		
		private EntityRef<Servers> _Servers;
		
		private EntityRef<Players> _Players;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onserver_idChanging(int value);
    partial void Onserver_idChanged();
    partial void OntimestampChanging(System.DateTime value);
    partial void OntimestampChanged();
    partial void Ontimestamp_dayChanging(System.DateTime value);
    partial void Ontimestamp_dayChanged();
    partial void Onmap_idChanging(int value);
    partial void Onmap_idChanged();
    partial void Ongm_idChanging(int value);
    partial void Ongm_idChanged();
    partial void Onfrag_limitChanging(int value);
    partial void Onfrag_limitChanged();
    partial void Ontime_limitChanging(int value);
    partial void Ontime_limitChanged();
    partial void Ontime_elapsedChanging(double value);
    partial void Ontime_elapsedChanged();
    partial void Onplayers_countChanging(int value);
    partial void Onplayers_countChanged();
    partial void Onwinner_idChanging(int value);
    partial void Onwinner_idChanged();
    #endregion
		
		public Matches()
		{
			this._PlayersInMatches = new EntitySet<PlayersInMatches>(new Action<PlayersInMatches>(this.attach_PlayersInMatches), new Action<PlayersInMatches>(this.detach_PlayersInMatches));
			this._GameModes = default(EntityRef<GameModes>);
			this._Maps = default(EntityRef<Maps>);
			this._Servers = default(EntityRef<Servers>);
			this._Players = default(EntityRef<Players>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_server_id", DbType="Int NOT NULL")]
		public int server_id
		{
			get
			{
				return this._server_id;
			}
			set
			{
				if ((this._server_id != value))
				{
					if (this._Servers.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onserver_idChanging(value);
					this.SendPropertyChanging();
					this._server_id = value;
					this.SendPropertyChanged("server_id");
					this.Onserver_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_timestamp", DbType="DateTime NOT NULL")]
		public System.DateTime timestamp
		{
			get
			{
				return this._timestamp;
			}
			set
			{
				if ((this._timestamp != value))
				{
					this.OntimestampChanging(value);
					this.SendPropertyChanging();
					this._timestamp = value;
					this.SendPropertyChanged("timestamp");
					this.OntimestampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_timestamp_day", AutoSync=AutoSync.Always, DbType="Date NOT NULL", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public System.DateTime timestamp_day
		{
			get
			{
				return this._timestamp_day;
			}
			set
			{
				if ((this._timestamp_day != value))
				{
					this.Ontimestamp_dayChanging(value);
					this.SendPropertyChanging();
					this._timestamp_day = value;
					this.SendPropertyChanged("timestamp_day");
					this.Ontimestamp_dayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_map_id", DbType="Int NOT NULL")]
		public int map_id
		{
			get
			{
				return this._map_id;
			}
			set
			{
				if ((this._map_id != value))
				{
					if (this._Maps.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onmap_idChanging(value);
					this.SendPropertyChanging();
					this._map_id = value;
					this.SendPropertyChanged("map_id");
					this.Onmap_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_gm_id", DbType="Int NOT NULL")]
		public int gm_id
		{
			get
			{
				return this._gm_id;
			}
			set
			{
				if ((this._gm_id != value))
				{
					if (this._GameModes.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Ongm_idChanging(value);
					this.SendPropertyChanging();
					this._gm_id = value;
					this.SendPropertyChanged("gm_id");
					this.Ongm_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_frag_limit", DbType="Int NOT NULL")]
		public int frag_limit
		{
			get
			{
				return this._frag_limit;
			}
			set
			{
				if ((this._frag_limit != value))
				{
					this.Onfrag_limitChanging(value);
					this.SendPropertyChanging();
					this._frag_limit = value;
					this.SendPropertyChanged("frag_limit");
					this.Onfrag_limitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_time_limit", DbType="Int NOT NULL")]
		public int time_limit
		{
			get
			{
				return this._time_limit;
			}
			set
			{
				if ((this._time_limit != value))
				{
					this.Ontime_limitChanging(value);
					this.SendPropertyChanging();
					this._time_limit = value;
					this.SendPropertyChanged("time_limit");
					this.Ontime_limitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_time_elapsed", DbType="Float NOT NULL")]
		public double time_elapsed
		{
			get
			{
				return this._time_elapsed;
			}
			set
			{
				if ((this._time_elapsed != value))
				{
					this.Ontime_elapsedChanging(value);
					this.SendPropertyChanging();
					this._time_elapsed = value;
					this.SendPropertyChanged("time_elapsed");
					this.Ontime_elapsedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_players_count", DbType="Int NOT NULL")]
		public int players_count
		{
			get
			{
				return this._players_count;
			}
			set
			{
				if ((this._players_count != value))
				{
					this.Onplayers_countChanging(value);
					this.SendPropertyChanging();
					this._players_count = value;
					this.SendPropertyChanged("players_count");
					this.Onplayers_countChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_winner_id", DbType="Int NOT NULL")]
		public int winner_id
		{
			get
			{
				return this._winner_id;
			}
			set
			{
				if ((this._winner_id != value))
				{
					if (this._Players.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onwinner_idChanging(value);
					this.SendPropertyChanging();
					this._winner_id = value;
					this.SendPropertyChanged("winner_id");
					this.Onwinner_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Matches_PlayersInMatches", Storage="_PlayersInMatches", ThisKey="id", OtherKey="match_id")]
		public EntitySet<PlayersInMatches> PlayersInMatches
		{
			get
			{
				return this._PlayersInMatches;
			}
			set
			{
				this._PlayersInMatches.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GameModes_Matches", Storage="_GameModes", ThisKey="gm_id", OtherKey="id", IsForeignKey=true)]
		public GameModes GameModes
		{
			get
			{
				return this._GameModes.Entity;
			}
			set
			{
				GameModes previousValue = this._GameModes.Entity;
				if (((previousValue != value) 
							|| (this._GameModes.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GameModes.Entity = null;
						previousValue.Matches.Remove(this);
					}
					this._GameModes.Entity = value;
					if ((value != null))
					{
						value.Matches.Add(this);
						this._gm_id = value.id;
					}
					else
					{
						this._gm_id = default(int);
					}
					this.SendPropertyChanged("GameModes");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Maps_Matches", Storage="_Maps", ThisKey="map_id", OtherKey="id", IsForeignKey=true)]
		public Maps Maps
		{
			get
			{
				return this._Maps.Entity;
			}
			set
			{
				Maps previousValue = this._Maps.Entity;
				if (((previousValue != value) 
							|| (this._Maps.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Maps.Entity = null;
						previousValue.Matches.Remove(this);
					}
					this._Maps.Entity = value;
					if ((value != null))
					{
						value.Matches.Add(this);
						this._map_id = value.id;
					}
					else
					{
						this._map_id = default(int);
					}
					this.SendPropertyChanged("Maps");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Servers_Matches", Storage="_Servers", ThisKey="server_id", OtherKey="id", IsForeignKey=true)]
		public Servers Servers
		{
			get
			{
				return this._Servers.Entity;
			}
			set
			{
				Servers previousValue = this._Servers.Entity;
				if (((previousValue != value) 
							|| (this._Servers.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Servers.Entity = null;
						previousValue.Matches.Remove(this);
					}
					this._Servers.Entity = value;
					if ((value != null))
					{
						value.Matches.Add(this);
						this._server_id = value.id;
					}
					else
					{
						this._server_id = default(int);
					}
					this.SendPropertyChanged("Servers");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Players_Matches", Storage="_Players", ThisKey="winner_id", OtherKey="id", IsForeignKey=true)]
		public Players Players
		{
			get
			{
				return this._Players.Entity;
			}
			set
			{
				Players previousValue = this._Players.Entity;
				if (((previousValue != value) 
							|| (this._Players.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Players.Entity = null;
						previousValue.Matches.Remove(this);
					}
					this._Players.Entity = value;
					if ((value != null))
					{
						value.Matches.Add(this);
						this._winner_id = value.id;
					}
					else
					{
						this._winner_id = default(int);
					}
					this.SendPropertyChanged("Players");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PlayersInMatches(PlayersInMatches entity)
		{
			this.SendPropertyChanging();
			entity.Matches = this;
		}
		
		private void detach_PlayersInMatches(PlayersInMatches entity)
		{
			this.SendPropertyChanging();
			entity.Matches = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PlayersInMatches")]
	public partial class PlayersInMatches : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _match_id;
		
		private int _player_id;
		
		private int _player_rank;
		
		private int _frags;
		
		private int _kills;
		
		private int _deaths;
		
		private EntityRef<Matches> _Matches;
		
		private EntityRef<Players> _Players;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onmatch_idChanging(int value);
    partial void Onmatch_idChanged();
    partial void Onplayer_idChanging(int value);
    partial void Onplayer_idChanged();
    partial void Onplayer_rankChanging(int value);
    partial void Onplayer_rankChanged();
    partial void OnfragsChanging(int value);
    partial void OnfragsChanged();
    partial void OnkillsChanging(int value);
    partial void OnkillsChanged();
    partial void OndeathsChanging(int value);
    partial void OndeathsChanged();
    #endregion
		
		public PlayersInMatches()
		{
			this._Matches = default(EntityRef<Matches>);
			this._Players = default(EntityRef<Players>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_match_id", DbType="Int NOT NULL")]
		public int match_id
		{
			get
			{
				return this._match_id;
			}
			set
			{
				if ((this._match_id != value))
				{
					if (this._Matches.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onmatch_idChanging(value);
					this.SendPropertyChanging();
					this._match_id = value;
					this.SendPropertyChanged("match_id");
					this.Onmatch_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_player_id", DbType="Int NOT NULL")]
		public int player_id
		{
			get
			{
				return this._player_id;
			}
			set
			{
				if ((this._player_id != value))
				{
					if (this._Players.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onplayer_idChanging(value);
					this.SendPropertyChanging();
					this._player_id = value;
					this.SendPropertyChanged("player_id");
					this.Onplayer_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_player_rank", DbType="Int NOT NULL")]
		public int player_rank
		{
			get
			{
				return this._player_rank;
			}
			set
			{
				if ((this._player_rank != value))
				{
					this.Onplayer_rankChanging(value);
					this.SendPropertyChanging();
					this._player_rank = value;
					this.SendPropertyChanged("player_rank");
					this.Onplayer_rankChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_frags", DbType="Int NOT NULL")]
		public int frags
		{
			get
			{
				return this._frags;
			}
			set
			{
				if ((this._frags != value))
				{
					this.OnfragsChanging(value);
					this.SendPropertyChanging();
					this._frags = value;
					this.SendPropertyChanged("frags");
					this.OnfragsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_kills", DbType="Int NOT NULL")]
		public int kills
		{
			get
			{
				return this._kills;
			}
			set
			{
				if ((this._kills != value))
				{
					this.OnkillsChanging(value);
					this.SendPropertyChanging();
					this._kills = value;
					this.SendPropertyChanged("kills");
					this.OnkillsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_deaths", DbType="Int NOT NULL")]
		public int deaths
		{
			get
			{
				return this._deaths;
			}
			set
			{
				if ((this._deaths != value))
				{
					this.OndeathsChanging(value);
					this.SendPropertyChanging();
					this._deaths = value;
					this.SendPropertyChanged("deaths");
					this.OndeathsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Matches_PlayersInMatches", Storage="_Matches", ThisKey="match_id", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Matches Matches
		{
			get
			{
				return this._Matches.Entity;
			}
			set
			{
				Matches previousValue = this._Matches.Entity;
				if (((previousValue != value) 
							|| (this._Matches.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Matches.Entity = null;
						previousValue.PlayersInMatches.Remove(this);
					}
					this._Matches.Entity = value;
					if ((value != null))
					{
						value.PlayersInMatches.Add(this);
						this._match_id = value.id;
					}
					else
					{
						this._match_id = default(int);
					}
					this.SendPropertyChanged("Matches");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Players_PlayersInMatches", Storage="_Players", ThisKey="player_id", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Players Players
		{
			get
			{
				return this._Players.Entity;
			}
			set
			{
				Players previousValue = this._Players.Entity;
				if (((previousValue != value) 
							|| (this._Players.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Players.Entity = null;
						previousValue.PlayersInMatches.Remove(this);
					}
					this._Players.Entity = value;
					if ((value != null))
					{
						value.PlayersInMatches.Add(this);
						this._player_id = value.id;
					}
					else
					{
						this._player_id = default(int);
					}
					this.SendPropertyChanged("Players");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
